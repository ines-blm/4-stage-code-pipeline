AWSTemplateFormatVersion: "2010-09-09"
Description: >
  "AWS CloudFormation Sample Template VPC"

Parameters:
  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t2.micro
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})" # IP Address
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  EnvironmentType: 
    Description: The environment type
    Type: String
    Default: test
    AllowedValues: 
      - prod
      - test
    ConstraintDescription: must be a prod or test

Mappings: 
  RegionAndInstanceTypeToAMIID: 
    us-east-1: #Top Key Level
      test: "ami-0b5eea76982371e91" # Top Key Level key
      prod: "ami-0b5eea76982371e91"
    us-west-1: 
      test: "ami-00d8a762cb0c50254"
      prod: "ami-00d8a762cb0c50254"

Resources:
  #Vpc
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: first-VCP

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: my-IG 

# internet gateway attachment vpc
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  #Subnets
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
    
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24

  #Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway
  
  #Route Table Subnet Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet2
      RouteTableId:
        Ref: PublicRouteTable  

  MyPublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId:
         Ref: myVPC   

  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: MyPublicNetworkAcl
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:  
       NetworkAclId:
         Ref: MyPublicNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0                  

  MyPublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet1
      NetworkAclId: 
        Ref: MyPublicNetworkAcl

  MyPublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: 
        Ref: publicSubnet2
      NetworkAclId: 
        Ref: MyPublicNetworkAcl

  #Internet Getway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: my-IG  
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  #Security Groupe
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation

  Ec2Instance: #Logical Name
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceType # Nothing is hardcoded
      ImageId: !FindInMap [RegionAndInstanceTypeToAMIID, !Ref AWS::Region ,!Ref EnvironmentType]
      KeyName: !Ref "KeyName"
      SubnetId: !Ref publicSubnet1
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup
      Tags: #Adding a tag
      - Key: "Name"
        Value: "CF-EC2"            
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello World in ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
 
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Ec2Instance       

Outputs:
  myVPCId:  
    Description: The ID of the VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  publicSubnet1:
    Description: The subnet ID to use for publicSubnet1
    Export: 
    Value: !Ref publicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-publSubnetID' #replacing a string
  publicSubnet2:
    Description: The subnet ID to use for publicSubnet2
    Export: 
    Value: !Ref publicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-pub2SubnetID' #replacing a string    
  InstanceSecurityGroup:
    Description: The security group ID 
    Value: !GetAtt 
      - InstanceSecurityGroup
      - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupID'